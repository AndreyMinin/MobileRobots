cart_launch - проект с описанием сцены для Gazebo с картом и объектами

polaris_ranger_ev - модель карта с датчиками
(simple_cart.sdf - карт без датчиков,
scan_cart.sdf - карт с плоским дальномером и камерой )

vehicle_ros_plugin - плагин для Gazebo, позволяющий управлять моделью из ROS
     robot/velocity - топик для задания скорости движения
     robot/steering - топик для задания кривизны траектории

simple_controller - простейший ROS контроллер, управляющий движением карта по овальной траектории, с помощью пид регулятора, в качестве ошибки используется расстояние
от траектории, вычисляемое на основе абсолутного положения робота

velocity_controller - модуль для управления скоростью карта на основе данных датчиков и будущей траектории

odo2tf - модуль преобразования данных о реальном положении модели робота (Odometry) в сообщения tf для формирования преобразования world->base_link

Установка
Необходимо, чтобы были установлены ROS (у меня Kinetic) и Gazebo (у меня версия 8)

1. Создать рабочую папку
 $ mkdir ros_ws
 $ mkdir ros_ws/src
 проинициализировать рабочую папку ROS
 $ cd ros_ws
 $ catkin_init_workspace src
2 скопировать проекты из архива в папку src

3 собрать проекты
 $ catkin_make
Если сборка прошла без ошибок можно переходить к запуску

Для первого запуска может потребоваться выход в интернет- чтобы закачать некторые модели с репозитария Gazebo
4 запуск
  команды выполняются из директории рабочей области (ros_ws)
  а) инициализация рабочей области ROS
  $ source devel/setup.bash
  б) запуск модели и контроллера
  $ roslaunch simple_controller controller.launch
  модель стартует, затем запускаетя интерфейс gzclient, rviz и rqt
  В rqt в плагина publish можно отправить сообщение с заданной скоростью в топик /robot/velocity

  Должно появиться окно GAZEBO, в котором карт ездит в некоторой сцене, отрабатывая заданную траекторию
  г) управление скоростью можно осуществлять с помощью rqt (publish_message) публикуя сообщение со значением скорости в топик /robot/velocity




